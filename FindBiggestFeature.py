# coding=utf8

import math


feature_weight = [-1.7321773938558844,
                  3.320524382863914, -0.06441608263368513, -0.12763892558930076, 0.9759418047058966,
                  -0.46571504837733824, -1.1407411923754998, 0.06500103166079789, 5.7923924368117685,
                  -0.5454381902893676, -0.397646898820369, -0.11277186951425255, -0.5411985962153577,
                  3.1826789806280353, -0.02786424872331281, -0.11210443072972373, -0.2874787551726782,
                  -0.05158207694928372, 0.01769354848866364, -0.01757028561678148, -0.049404881725972516,
                  0.03231491542575716, 200.9263160709118, 0.8717861419683669, -0.0640416373093237,
                  -0.881052039020698, 3.4484661979843345, -0.14361358250145123, -0.06042205692958261,
                  -0.13112235489309998, 3.9873809320544433, 3.671535994432319, -0.12142018401124005,
                  -0.1621679825534076, 9.888268472596295, 0.2624094585027455, -0.5378608195052524,
                  156.030661656438, 2.2172010702171647, 9.186187577688969, 9.420937988270742, 163.6503788085345,
                  25.887311473395815, 141.73253822105465, -0.5910079573143768, 0.37156585590932384, 3.5833198171495013,
                  0.8495401671786768, 6.870377137623441, 0.7165070433389132, 0.209767881524785, 17.739158778030376,
                  -0.12036441560981334, 129.30529632175651, 0.21550790994585792, 6.076655696280943, 6.884765379899306,
                  26.61957403114167, 8.046009241868394, 8.7512509094837, 66.889662224785, 22.29551055802028,
                  1.424702140115604]

feature_category = [
    "", -1, 0, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 2000, 2001, 2002, 2003, 3000, 3001, 3002, 3003, 3004, 3005, 4000,
    4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 5001, 5002, 5003, 6000, 6001, 6002, 6003, 6004, 6005, 6006,
    6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 7001, 7002, 7004, "food", "good",
    "null", "peop", "pet", "pet.", "scen"
]

feature_rate = [
    39719, 129346, 4219130, 6110776, 9386, 984763, 78963, 185598, 33866, 721715, 1703442, 319677, 248709, 18526,
    26896648, 1266877, 1288111, 1344102, 332802, 6083502, 6695308, 146791, 503, 41216, 155995, 39047, 42932, 240029,
    128958, 525892, 35127, 70726, 1409064, 5352825, 22262, 48763, 172316, 71, 108861, 24810, 3826, 2463, 12590, 1518,
    567816, 150272, 13951, 36533, 50296, 6490, 112311, 1298, 669170, 34, 148920, 14182, 12172, 22924, 53383, 142863,
    9141, 1, 22237
]

feature_weight2 = [
    29.484244288874677, 2.683661360763006, -0.06356371902322977, -0.12697686457748827, 1.0487573316060486,
    -0.463254772003496, -1.1215378842969645, 0.0569790904684582, 5.101038891146755, -0.5428974369811508,
    -0.3948577188427278, -0.08951413025232245, -0.5375074207919545, 7.051028400879434, -0.027743672063533807,
    -0.10750380630701262, -0.2888965530058068, -0.0524671908316738, 0.022485110616051462, -0.01745522254468995,
    -0.04920873529449417, 0.04888993168915842, 203.7005304354351, 0.9444851174289267, -0.06261114221112121,
    0.05888003147473505, 3.536684444988941, -0.13453734877304488, -0.1503627702645298, -0.13264035092399462,
    4.401248265264173, 6.921472099755375, -0.1208637624620341, -0.16196709784783733, 9.101003074060305,
    0.6836771623877463, -0.5280075986351419, 145.953334917859, 2.199872763541121, 8.73625128377406, 0.2677487148918403,
    177.1781000617836, 17.533586167964668, 147.78684138570742, -0.5855743450893102, 0.4217277062225586,
    3.8172640511353673, -0.21212579934968614, 7.5646457277958525, 1.8429993496942465, 0.6378148654847066,
    17.606329422604457, -0.1194963366885347, 131.44220996714998, 0.21908341709323412, 6.80888289569531,
    7.261954862277734, 30.29336947752461, 6.47441960215581, 9.55202547396579, 68.80534577594699, 0.0,
    0.7945898264377121
]

print len(feature_category)
print len(feature_weight)
print len(feature_rate)
print len(feature_weight2)


def find_larger_than_m(m):
    for i, weight in enumerate(feature_weight):
        if math.fabs(weight) > m:
            print "the weight is:  %s and weight2 is: %s and  category is : %s and rate is %s  and index is: %d " \
                  % (str(weight),  str(feature_weight2[i]), str(feature_category[i]), str(feature_rate[i]), i)

find_larger_than_m(100)


def find_info_by_category(category):
    for i, elem in enumerate(feature_category):
        if elem == category:
            print "the weight is:  %s  and weight2 is: %s and  category is : %s and rate is %s and index is: %d " \
                  % (str(feature_weight[i]),  str(feature_weight2[i]), category, feature_rate[i], i)
            break

print " the info "

find_info_by_category(2000)


def find_info_by_index(index):
    print " the weight is: %s and weight2 is: %s and category is: %s and rate is %s and index is : %d " \
          % (str(feature_weight[index]), str(feature_weight2[index]), feature_category[index], feature_rate[index],
             index)

find_info_by_index(62)
